---
title: "NDVI Analysis- Wolverine"
format: html
editor: visual
---

## Libraries

```{r}
#| output = FALSE
#| warning = FALSE 
## Load libraries 
library(raster)
library(rgdal)
library(rgeos)
library(RColorBrewer)
library(tidyverse)
library(sf)
library(rpart)
library(rpart.plot)
library(ggplot2)
library(mapedit)
library(mapview)
library(caret)
library(forcats)
library(rasterVis)
library(cowplot)
library(basemaps)
library(terra)
library(tidyterra)
library(rasterpdf)
library(ggmap)
library(plyr)

```

## Download data

```{r}
#| output = FALSE
#bring in shapefile to crop extents to
nj.bound<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Shapefile")

setwd("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/20220628")

#list all landsat files in file
all_bandsAUG21<-list.files("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/LC08_L1TP_067018_20210829_20210909_02_T1",
                      pattern= glob2rx("*B*.TIF$"),
                      full.names = TRUE)

#stack all bands into one rasterstack
landsat.st <- stack(all_bandsAUG21[c(1,4,5,6,7,8,9)]) #pulled out of order, this removes bands 10 and 11, and band 8 since the extent is messed up (fix extents later if needed). Orders from bands 1-7
landsat.spat<-rast(landsat.st)

#Get elevation data
elev<-raster::getData('alt', country= 'USA')
AK<-terra::rast(elev[[2]])

#create extents for Wolverine specific area and crop landsat to NJ extent
nj.bound <- st_transform(nj.bound, crs = st_crs(landsat.st))
eNJ <- extent(nj.bound)
eWolv <-extent(c(390000, 400000, 6692000, 6700000)) #nice to be able to flip between extents for a more "zoomed in" look
landsat.crop21 <- crop(landsat.st, eNJ)
landsat.crop21 <-raster::reclassify(landsat.crop21, cbind(-Inf, 0, NA), right=FALSE) #remove values below 0 
#colnames(landsat.crop21) <- c('band1','band2','band3','band4','band5','band6','band7')
```

# Training classification

```{r}
## load training points
training_points<- st_read("./wolv_trainingpoints_dec31_2.shp")
training_points<- st_transform(training_points, crs= st_crs(landsat.st))
all_pts_spatial <- as(training_points, 'Spatial')

#Create a training and testing dataset
Train <- createDataPartition(training_points$id, p=0.7, list=F)
training <- training_points [ Train, ]
testing <- training_points [ -Train, ]

#make points spatial
trainingSpatial<-as(training, 'Spatial')
testingSpatial<-as(testing, 'Spatial')

alldf<-raster::extract(landsat.crop21, all_pts_spatial) %>%
  round()
alldf <- data.frame(all_pts_spatial$class, alldf)

#create data frame of band values at each training point
traindf <- raster::extract(landsat.crop21, trainingSpatial) %>%
  round()
traindf <- data.frame(trainingSpatial$class, traindf)

#create data frame of band values at each testing point
testdf <- raster::extract(landsat.crop21, testingSpatial) %>%
  round()
testdf <- data.frame(testingSpatial$class, testdf)
#colnames(testdf) <- c('landcover','band1','band2','band3','band4','band5','band6','band7')

#create model of datapoints and create classification tree
model.class <- rpart(as.factor(trainingSpatial.class)~., data=traindf, method='class') 
rpart.plot(model.class, box.palette = "auto", main= "Classificaiton Tree")

#use model to predict landcover types across raster
pr21 <-predict(landsat.crop21, model.class, type='class', progress='text') %>%
  ratify()

#prrast<-terra::rast(pr21)
#crs(prrast) == crs(AK) #true

#create levels plot to examine each land cover type
levels(pr21)<-levels(pr21)[[1]]%>%
  mutate(legend=c("forest","ice","rock/water","shrub","tundra"))

#define color scheme 
covcol= c('#448970','snow', '#828282', '#FFA77F','#D1FF73')

#create raster of modeled land cover 
landcov21<- levelplot(pr21, maxpixels=1e6,
          col.regions= covcol,
          scales=list(draw=FALSE),
          main = "Supervised Classification of Imagery")
plot(landcov21)
```

Assess model

```{r}
test <- raster::extract(pr21, testingSpatial) %>% 
  as.data.frame() #%>% 
  #rename(id = ".")

#testingSpatial$id <- mapvalues(testingSpatial$id, from = c(2,3,4,5,7), to = c(1,2,3,4,5))

testProbs <- data.frame(
  obs = as.factor(trainingSpatial$id),
  pred = as.factor(test$.)) %>% 
  mutate(correct = ifelse(obs == pred, 1, 0))

t <- as.factor(testingSpatial)


confMatrix <- confusionMatrix(testProbs$obs, testProbs$pred)
```

```{r}

library(tidyverse)
colnames(traindf) <- c('class','band1','band2','band3','band4','band5','band6','band7')

#create a dataframe of mean band values of each landcover type
profiles <- traindf %>% 
  as.data.frame() %>% 
  cbind(., trainingSpatial$id) %>% 
  dplyr::rename(id = "trainingSpatial$id") %>% 
  na.omit() %>% 
  group_by(id) %>% 
  dplyr::summarise(band1 = mean(band1),
            band2 = mean(band2),
            band3 = mean(band3),
            band4 = mean(band4),
            band5 = mean(band5),
            band6 = mean(band6),
            band7 = mean(band7)) %>% 
  mutate(id = case_when(id == 1 ~ "icesnow",
                        id == 2 ~ "tundra",
                        id == 3 ~ "forest",
                        id == 4 ~ "shrub",
                        id == 5 ~ "rockwater")) %>% 
  as.data.frame()

head(profiles)
```

Visualize spectral bands

```{r}
profiles %>% 
  select(-id) %>% 
  gather() %>% 
  mutate(class = rep(c("icesnow", "tundra", "forest","shrub", "rockwater"), 7)) %>% 
  ggplot(data = ., aes(x = fct_relevel(as.factor(key),
                                       levels = c("band1", "band2", "band3", "band4"
                                                  ,"band5","band6", "band7")), 
                       y = value, 
                       group=class, color = class)) +
  geom_point(size = 2.5) +
  geom_line(lwd = 1.2) +
  scale_color_manual(values=c('darkgreen','snow2', 'dimgray', 'darkseagreen3','darkolivegreen4')) +
  labs(title = "Spectral Profile from Landsat 8 Imagery",
       x = "Bands",
       y = "Reflectance") +
  #scale_y_continuous(limits=c(5000, 15000)) +
  theme(panel.background = element_blank(),
        panel.grid.major = element_line(color = "gray", size = 0.5),
        panel.grid.minor = element_line(color = "gray", size = 0.5),
        axis.ticks = element_blank())
```

Visualize distribution of spectral bands

```{r}
profiles %>% 
  select(-id) %>% 
  gather() %>% 
  mutate(class = rep(c("icesnow", "tundra", "forest","shrub", "rockwater"), 7)) %>% 
  ggplot(., aes(x=value, group=as.factor(class), fill=as.factor(class))) + 
  geom_density(alpha = 0.5) + 
  geom_vline(data = . %>% group_by(class) %>% dplyr::summarise(grp.mean = mean(value)),
             aes(xintercept=grp.mean, color = class), linetype="dashed", size=1) +
 # scale_color_manual(values=c('darkgreen','snow', 'dimgray', 'darkseagreen3',
  #                            'darkolivegreen4')) +
  theme(panel.background = element_blank(),
        panel.grid.major = element_line(color = "gray", size = 0.5),
        panel.grid.minor = element_line(color = "gray", size = 0.5),
        axis.ticks = element_blank()) +
  labs(x = "Reflectance Value",
       y = "Density",
       title = "Density histograms of spectral profiles",
       subtitle = "Vertical lines represent mean group reflectance values")
```

# Import watershed shape files

The following code chunks follow a similar analysis pattern as described here.

1.  Imports watershed shapefile
2.  Extracts modeled land cover by watershed outline
3.  Segregates each land cover type so spatial patterns can be more easily observed
4.  Calculates area of total watershed and each land cover type
5.  Extracts elevation based on watershed boundaries

## Wolverine Watershed

```{r}
wolv.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/Wolv")
wolv.shed<- terra::vect(st_transform(wolv.shed, crs = st_crs(landsat.st)))
#AKwolv<-terra::project(AK,crs(wolv.shed)) 

prlandcov<-terra::rast(pr21)
wolv.cover<- terra::crop(prlandcov,wolv.shed, mask=TRUE)
#crs(wolv.cover) == crs(AK) #true
wolv.size<-terra::expanse(wolv.cover, unit="km")

wolv.segments<-terra::segregate(wolv.cover)
names(wolv.segments) <- c("forest","ice","rockwater","shrub","tundra")
plot(wolv.segments)

forest.size<-sum(values(wolv.segments$forest, na.rm=TRUE))
ice.size<-sum(values(wolv.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(wolv.segments$rockwater), na.rm=TRUE)
shrub.size<-sum(values(wolv.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(wolv.segments$tundra), na.rm=TRUE)

all.size<- sum(forest.size, ice.size, rockwater.size, shrub.size, tundra.size)

forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100

wolvpercents<-c(forper, iceper, rowaper, shrper, tunper)
#wolvelev<-terra::crop(AKwolv, wolv.shed, mask=TRUE)

#terra::writeRaster(wolv.cover, "wolvcoverspatial.tif")
#terra::writeRaster(nj.cover, "njcoverspatial.tif")
#terra::writeRaster(glacier.cover, "glaciercoverspatial.tif")
#terra::writeRaster(tundra.cover, "tundracoverspatial.tif")
#terra::writeRaster(shrub.cover, "shrubcoverspatial.tif")
#terra::writeRaster(forest.cover, "forestcoverspatial.tif")
#terra::writeRaster(term.cover, "terminuscoverspatial.tif")
#terra::writeRaster(cabin.cover, "cabincoverspatial.tif")
#terra::writeRaster(lakein.cover, "lakeincoverspatial.tif")
```

## Shrub

Maybe something is up with the crs here? Try to save the layer that's successfully plotting on arc

```{r}
#upload shapefiles, set crs
shrub.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/ShrubSubwatershed") 
shrub.terra<-terra::vect(shrub.shed)
shrub.terra<-terra::project(shrub.terra, crs(landsat.st))
AK<-terra::project(AK,crs(shrub.shed)) 


prlandcov<-terra::rast(pr21)
shrub.cover<- terra::crop(prlandcov,shrub.terra, mask=TRUE)
shrub.shed.size<-terra::expanse(shrub.cover, unit="km")

#segment by classification
shrub.segments<-terra::segregate(shrub.cover)
names(shrub.segments) <- c("forest","ice","rockwater","shrub","tundra")
plot(shrub.segments)

#calculate area size for each cover type
forest.size<-sum(values(shrub.segments$forest, na.rm=TRUE))
ice.size<-sum(values(shrub.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(shrub.segments$rockwater), na.rm=TRUE)
shrub.size<-sum(values(shrub.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(shrub.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum(forest.size, ice.size, rockwater.size, shrub.size, tundra.size)
forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
shrub.percents<-c(forper, iceper, rowaper, shrper, tunper)

shrub.percents
shrub.elev<-terra::crop(AK, shrub.shed, mask=TRUE)
```

## Tundra

```{r}
#upload shapefiles, set crs
tundra.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/TundraSubwatershed")
tundra.shed<- terra::vect(st_transform(tundra.shed, crs = st_crs(landsat.st)))
prlandcov<-terra::rast(pr21)
tundra.shed<-project(tundra.shed, prlandcov)
tundra.cover<- terra::crop(prlandcov,tundra.shed, mask=TRUE)
tundra.shed.size<-terra::expanse(tundra.cover, unit="km")

#segment by classification
tundra.segments<-terra::segregate(tundra.cover)
names(tundra.segments) <- c("forest","ice","rockwater","shrub","tundra")
plot(tundra.segments)

#calculate area size for each cover type
forest.size<-sum(values(tundra.segments$forest, na.rm=TRUE))
ice.size<-sum(values(tundra.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(tundra.segments$rockwater), na.rm=TRUE)
shrub.size<-sum(values(tundra.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(tundra.segments$tundra), na.rm=TRUE)

#calculate total area and percents
tundra.all.size<- sum(forest.size, ice.size, rockwater.size, shrub.size, tundra.size)
forper<-(forest.size/tundra.all.size)*100
iceper<-(ice.size/tundra.all.size)*100
rowaper<-(rockwater.size/tundra.all.size)*100
shrper<-(shrub.size/tundra.all.size)*100
tunper<-(tundra.size/tundra.all.size)*100
tundra.percents<-c(forper, iceper, rowaper, shrper, tunper)

tundra.percents
AKtundra<-terra::project(AK,crs(tundra.shed)) 
tundra.elev<-terra::crop(AKtundra, tundra.shed, mask=TRUE)
```

## Glacier

```{r}
#upload shapefiles, set crs
glacier.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/Glacier/Glacier Sonde Subwatershed")
st_crs(glacier.shed)<-st_crs(crs.temp)
glacier.shed<- terra::vect(st_transform(glacier.shed, crs = st_crs(wolv.shed)))
prlandcov<-terra::rast(pr21)
glacier.shed<-project(glacier.shed, prlandcov)
glacier.cover<- terra::crop(prlandcov,glacier.shed, mask=TRUE)
glacier.shed.size<-terra::expanse(glacier.cover, unit="km")

#segment by classification
glacier.segments<-terra::segregate(glacier.cover)
names(glacier.segments) <- c("ice","rockwater","tundra")
plot(glacier.segments)

#calculate area size for each cover type
#forest.size<-sum(values(glacier.segments$forest, na.rm=TRUE))
ice.size<-sum(values(glacier.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(glacier.segments$rockwater), na.rm=TRUE)
#shrub.size<-sum(values(glacier.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(glacier.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum( ice.size, rockwater.size, tundra.size)
#forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
#shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
glacier.percents<-c(0, iceper, rowaper,0, tunper)

glacier.percents
glacier.elev<-terra::crop(AK, glacier.shed, mask=TRUE)
```

## NJ

```{r}
#upload shapefiles, set crs
nj.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/Nellie Juan Sonde Watershed")
nj.shed<- terra::vect(st_transform(nj.shed, crs = st_crs(landsat.st)))
prlandcov<-terra::rast(pr21)
nj.shed<-project(nj.shed, prlandcov)
nj.cover<- terra::crop(prlandcov,nj.shed, mask=TRUE)
nj.shed.size<-terra::expanse(nj.cover, unit="km")

#segment by classification
nj.segments<-terra::segregate(nj.cover)
names(nj.segments) <- c("forest","ice","rockwater","shrub","tundra")
plot(nj.segments)

#calculate area size for each cover type
forest.size<-sum(values(nj.segments$forest, na.rm=TRUE))
ice.size<-sum(values(nj.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(nj.segments$rockwater), na.rm=TRUE)
shrub.size<-sum(values(nj.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(nj.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum(forest.size, ice.size, rockwater.size, shrub.size, tundra.size)
forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
nj.percents<-c(forper, iceper, rowaper, shrper, tunper)

nj.percents
AKnj<-terra::project(AK,crs(nj.shed)) 
nj.elev<-terra::crop(AKnj, nj.shed, mask=TRUE)
```

## Forest

```{r}
#upload shapefiles, set crs
forest.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/Forest_New")
forest.shed<- terra::vect(st_transform(forest.shed, crs = st_crs(landsat.st)))
prlandcov<-terra::rast(pr21)
forest.shed<-project(forest.shed, prlandcov)
forest.cover<- terra::crop(prlandcov,forest.shed, mask=TRUE)
forest.shed.size<-terra::expanse(forest.cover, unit="km")

#segment by classification
forest.segments<-terra::segregate(forest.cover)
names(forest.segments) <- c("forest","rockwater")
plot(forest.segments)

#calculate area size for each cover type
forest.size<-sum(values(forest.segments$forest, na.rm=TRUE))
#ice.size<-sum(values(forest.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(forest.segments$rockwater), na.rm=TRUE)
#shrub.size<-sum(values(forest.segments$shrub), na.rm=TRUE)
#tundra.size<-sum(values(forest.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum(forest.size, rockwater.size)
forper<-(forest.size/all.size)*100
#iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
#shrper<-(shrub.size/all.size)*100
#tunper<-(tundra.size/all.size)*100
forest.percents<-c(100,0, 0, 0,0) #model doesn't do a good job, changing to 100% forest

forest.percents
forest.elev<-terra::crop(AKnj, forest.shed, mask=TRUE)
```

## Terminus

```{r}
#upload shapefiles, set crs
term.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/Terminus_Subwatershed")
term.shed<- terra::vect(st_transform(term.shed, crs = st_crs(landsat.st)))
prlandcov<-terra::rast(pr21)
term.shed<-project(term.shed, prlandcov)
term.cover<- terra::crop(prlandcov,term.shed, mask=TRUE)
term.shed.size<-terra::expanse(term.cover, unit="km")

#segment by classification
term.segments<-terra::segregate(term.cover)
names(term.segments) <- c("forest","ice","rockwater","shrub","tundra")
plot(term.segments)

#calculate area size for each cover type
forest.size<-sum(values(term.segments$forest, na.rm=TRUE))
ice.size<-sum(values(term.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(term.segments$rockwater), na.rm=TRUE)
shrub.size<-sum(values(term.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(term.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum(forest.size, ice.size, rockwater.size, shrub.size, tundra.size)
forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
term.percents<-c(forper, iceper, rowaper, shrper, tunper)

term.percents
#term.elev<-terra::crop(AK, term.shed, mask=TRUE)
```

## Cabin

```{r}
#upload shapefiles, set crs
cabin.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/CabinWatershedPolygon")
cabin.shed<- terra::vect(st_transform(cabin.shed, crs = st_crs(landsat.st)))

prlandcov<-terra::rast(pr21)
cabin.shed<-project(cabin.shed, prlandcov)
cabin.cover<- terra::crop(prlandcov,cabin.shed, mask=TRUE)
cabin.shed.size<-terra::expanse(cabin.cover, unit="km")

#segment by classification
cabin.segments<-terra::segregate(cabin.cover)
names(cabin.segments) <- c("ice","rockwater","tundra")
plot(cabin.segments)

#calculate area size for each cover type
#forest.size<-sum(values(cabin.segments$forest, na.rm=TRUE))
ice.size<-sum(values(cabin.segments$ice), na.rm=TRUE)
rockwater.size<-sum(values(cabin.segments$rockwater), na.rm=TRUE)
#shrub.size<-sum(values(cabin.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(cabin.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum( ice.size, rockwater.size,tundra.size)
#forper<-(forest.size/all.size)*100
iceper<-(ice.size/all.size)*100
rowaper<-(rockwater.size/all.size)*100
#shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
cabin.percents<-c(0, iceper, rowaper, 0,  tunper)

cabin.percents
cabin.elev<-terra::crop(AKnj, cabin.shed, mask=TRUE)
```

## Lake Inlet

```{r}
#upload shapefiles, set crs
lakein.shed<- st_read("/Users/hannahrichardson/Documents/BSU/Research/Data/Landsat Data/Watershed boundaries/CRS works/LakeInlet")
lakein.shed<- terra::vect(st_transform(lakein.shed, crs = st_crs(landsat.st)))
prlandcov<-terra::rast(pr21)
lakein.shed<-project(lakein.shed, prlandcov)
lakein.cover<- terra::crop(prlandcov,lakein.shed, mask=TRUE)
lakein.shed.size<-terra::expanse(lakein.cover, unit="km")

#segment by classification
lakein.segments<-terra::segregate(lakein.cover)
names(lakein.segments) <- c("tundra")
plot(lakein.segments)

#calculate area size for each cover type
#forest.size<-sum(values(lakein.segments$forest, na.rm=TRUE))
#ice.size<-sum(values(lakein.segments$ice), na.rm=TRUE)
#rockwater.size<-sum(values(lakein.segments$rockwater), na.rm=TRUE)
#shrub.size<-sum(values(lakein.segments$shrub), na.rm=TRUE)
tundra.size<-sum(values(lakein.segments$tundra), na.rm=TRUE)

#calculate total area and percents
all.size<- sum(tundra.size)
#forper<-(forest.size/all.size)*100
#iceper<-(ice.size/all.size)*100
#rowaper<-(rockwater.size/all.size)*100
#shrper<-(shrub.size/all.size)*100
tunper<-(tundra.size/all.size)*100
lakein.percents<-c(0,0,0,0,tunper)

lakein.percents
#lakein.elev<-terra::crop(AK, lakein.shed, mask=TRUE)
```

# Plot

### Barplots

```{r}
###Barplots
#DOC sites
#cover.df<- data.frame(Watershed = c(rep("Wolverine", 5), rep("Shrub", 5), rep("Tundra", 5), #rep("Glacier", 5), rep("NJ", 5), rep("Forest", 5), rep("Terminus", 5)), 
 #                     LandCov = rep(c("forest","snow/ice","rock/water","shrub","tundra"), 7), 
  #                    Percent= round(c(wolvpercents, shrub.percents, tundra.percents, glacier
#.percents, nj.percents, forest.percents, term.percents)), 0)

### Mixing sites
cover.df<- data.frame(Watershed = c(rep("Wolverine", 5), rep("Shrub", 5), rep("Tundra", 5), rep("NJ", 5), rep("Forest", 5), rep("Cabin", 5), rep("LakeInlet", 5)), 
                      LandCov = rep(c("forest","snow/ice","rock/water","shrub","tundra"),
                                    7), 
                      Percent= round(c(wolvpercents, shrub.percents, tundra.percents,
                                       nj.percents, forest.percents, cabin.percents,
                                       lakein.percents)) , 0,
                      meanelev= c(rep(1165, 5), rep(766, 5), rep(903, 5), rep(1117, 5),
                                  rep(86, 5), rep(1206, 5), rep(820, 5)))

#write mean elevation
bplot<-ggplot(cover.df, aes(fill=LandCov, y=Percent, x=reorder(Watershed, meanelev)))+
  geom_bar(position='stack', stat='identity', color='black')+
  scale_fill_manual(values = c('#448970', '#828282', '#FFA77F','snow','#D1FF73'))+
  scale_y_continuous(expand= c(0,0))+
  ylab('Percentage')+
  xlab('Watershed')+
  theme_classic()

bplot+
  geom_text(aes(label = ifelse(Percent>30, Percent,'')), position = position_stack(vjust = 0.5))

  
pdf(file ="lcbarplotstundra.pdf", width= 12, height = 4)
bplot+
  geom_text(aes(label = ifelse(Percent>30, Percent,'')), position = position_stack(vjust = 0.5))+
  theme(axis.text = element_text(size = 13))+
  theme(axis.title = element_text(size = 16))
```

```{r}
kenai<-draw_ext()
nj.cover<- project(nj.cover, "epsg:3857")
kenai<-st_transform(kenai, crs=st_crs(nj.cover))
nj.cover.crop<-crop(nj.cover, kenai)

##basemap_gglayer
bm<- ggplot()+
  basemap_gglayer(ext=kenai, map_service = "carto", map_type = "light")+
  scale_fill_identity() + 
  coord_sf()

##basemap_ggplot
basemap_ggplot(ext=kenai, map_service = "carto", map_type = "light")

#basemap()
b<-basemap_terra(ext=kenai, map_service = "carto", map_type = "light")

#mapviewr
b<-basemap_mapview(ext=kenai, map_service = "carto", map_type = "light")

## test just landcover
lc<-ggplot()+ 
 stat_spatraster(
  data= nj.cover.crop,
  mapping = aes(),
  geom = "raster",
  na.rm = TRUE,
  show.legend = NA,
  inherit.aes = TRUE,
  maxcell = 5e+05)+
  scale_fill_manual(values= c('darkgreen','snow3','dimgray','darkseagreen3','darkolivegreen4'), na.value='transparent')

## combine

lc+ stat_spatraster(data=basemap_plot(ext=kenai, map_service = "carto", map_type = "light"))

nj.rast<-raster(nj.cover)
forest.rast<-raster(forest.cover)
shrub.rast<-raster(shrub.cover)

```

## Interactive maps

```{r}
mapview(raster(nj.cover), col.regions=c('darkgreen','snow3','dimgray','darkseagreen3','darkolivegreen4'), na.color= 'transparent', legend=FALSE)

mapview(raster(wolv.cover),col.regions=c('darkgreen','snow3','dimgray','darkseagreen3','darkolivegreen4'), na.color= 'transparent', legend=FALSE) 

mapview(raster(forest.cover),col.regions=c('darkgreen','dimgray'), na.color= 'transparent', legend=FALSE) 

mapview(raster(forest.cover),col.regions=c('darkgreen','snow3','dimgray','darkseagreen3','darkolivegreen4'), na.color= 'transparent', legend=FALSE) 
```

```{r}
njtest<-as.polygons(nj.shed)


library(leaflet)
leaflet() %>% addTiles() %>%
  addProviderTiles(providers$Esri.WorldImagery)  %>%
  addRasterImage(raster(nj.cover), colors= covcol, opacity=0.5) 
```

## Background map

```{r}
bg<-ggmap::get_map(as.vector(
  st_bbox(
    st_transform(wolv.bound, 4326))), 
  source= "stamen",
  maptype= "terrain"
)
mapcrs<-crs(bg)
wolv.cover.new<-project(wolv.cover, 4326)

  
q<-ggplot()+
  geom_spatraster(data= st_transform(wolv.cover, 4326)
  geom_sf(data = st_transform(cty.info, 4326), 
          mapping = aes(fill = medincome), 
          alpha=0.7, 
          inherit.aes = FALSE) +
  geom_sf(data=st_transform(cty.info, 4326), 
          color="yellow", 
          fill=NA, 
          inherit.aes = FALSE) +
  scale_fill_continuous() +
  coord_sf(crs = st_crs(4326))
```

## Resources

[Training data](https://urbanspatial.github.io/classifying_satellite_imagery_in_R/)

[Other NDVI](https://rspatial.org/raster/rs/rs.pdf) Here's where I got the idea to just look at vegetation

[Convert different Landsat images](https://sagatutorials.wordpress.com/land-cover-change-image-differencing/) and find difference between bands
